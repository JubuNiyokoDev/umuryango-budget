name: Build and Deploy Multi-Architecture APKs

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Setup Node.js, Java, Android SDK
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Copy assets
      - name: Copy assets
        run: |
          mkdir -p android/app/src/main/assets
          cp -r assets/* android/app/src/main/assets/ || true

      # Suppress compileSdk warning
      - name: Suppress compileSdk warning
        run: echo "android.suppressUnsupportedCompileSdk=36" >> android/gradle.properties

      # Configure multi-architecture APKs
      - name: Configure multi-architecture APKs
        run: |
          echo '' >> android/app/build.gradle
          echo 'android {' >> android/app/build.gradle
          echo '    splits {' >> android/app/build.gradle
          echo '        abi {' >> android/app/build.gradle
          echo '            reset()' >> android/app/build.gradle
          echo '            enable true' >> android/app/build.gradle
          echo '            universalApk true' >> android/app/build.gradle
          echo '            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"' >> android/app/build.gradle
          echo '        }' >> android/app/build.gradle
          echo '    }' >> android/app/build.gradle
          echo '}' >> android/app/build.gradle

      # Build APKs
      - name: Build Multi-Architecture APKs
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleRelease

      # Upload APKs as artifacts (all architectures)
      - name: Upload APKs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: android/app/build/outputs/apk/release/*.apk

      # Create GitHub Release (if not exist) using GH_PAT
      - name: Create GitHub Release
        id: gh_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            Release includes APKs for multiple architectures:
            - armeabi-v7a
            - arm64-v8a
            - x86
            - x86_64
            - universal
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # Upload all APKs to GitHub Release
      - name: Upload APKs to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          files: android/app/build/outputs/apk/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # Generate links.json with URLs of all APKs
      - name: Generate links.json
        run: |
          mkdir -p dist
          echo "{" > dist/links.json
          for apk in android/app/build/outputs/apk/release/*.apk; do
            filename=$(basename "$apk")
            echo "  \"$filename\": \"https://github.com/${GITHUB_REPOSITORY}/releases/download/v${GITHUB_RUN_NUMBER}/$filename\"," >> dist/links.json
          done
          # Remove last comma and close JSON
          sed -i '$ s/,$//' dist/links.json
          echo "}" >> dist/links.json

      # Upload links.json as artifact
      - name: Upload links.json
        uses: actions/upload-artifact@v4
        with:
          name: links-json
          path: dist/links.json
